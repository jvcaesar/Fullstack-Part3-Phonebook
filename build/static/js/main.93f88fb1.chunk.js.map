{"version":3,"sources":["services/persons.js","App.js","index.js"],"names":["baseUrl","axios","get","then","response","data","newPersonObj","post","id","delete","newObj","put","Person","person","deletePerson","name","number","onClick","Filter","value","handler","onChange","PersonForm","handleSubmit","newName","nameHandler","newNumber","numberHandler","onSubmit","type","Persons","persons","filterWord","setAllPersons","personsToShow","filter","toLowerCase","indexOf","map","window","confirm","personService","console","log","Notification","message","style","color","background","borderStyle","borderRadius","padding","marginBottom","fontSize","App","useState","setPersons","setNewName","setNewNumber","setFilterWord","errorMessage","setErrorMessage","getAllPersons","useEffect","event","target","preventDefault","personObject","nameFound","found","find","nameExists","updatedPerson","setTimeout","catch","error","concat","ReactDOM","render","document","getElementById"],"mappings":"iKAEMA,EAAU,eAwBD,EAtBA,WAGX,OAFgBC,IAAMC,IAAIF,GAEXG,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAmB9B,EAhBM,SAACC,GAElB,OADgBL,IAAMM,KAAKP,EAASM,GACrBH,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAc9B,EAXM,SAACG,GAGlB,OAFgBP,IAAMQ,OAAN,UAAgBT,EAAhB,YAA2BQ,KAUhC,EALM,SAACA,EAAIE,GAEtB,OADgBT,IAAMU,IAAN,UAAaX,EAAb,YAAwBQ,GAAME,GAC/BP,MAAK,SAAAC,GAAQ,OAAIA,EAASC,S,OCpBvCO,EAAS,SAAC,GAA8B,IAA5BC,EAA2B,EAA3BA,OAAQC,EAAmB,EAAnBA,aACxB,OACE,gCACGD,EAAOE,KADV,IACiBF,EAAOG,OACtB,wBAAQC,QAASH,EAAjB,wBAKAI,EAAS,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,MAAOC,EAAc,EAAdA,QACvB,OACE,sDACqB,uBAAOD,MAAOA,EAAOE,SAAUD,QAKlDE,EAAa,SAAC,GAAqE,IAAnEC,EAAkE,EAAlEA,aAAcC,EAAoD,EAApDA,QAASC,EAA2C,EAA3CA,YAAaC,EAA8B,EAA9BA,UAAWC,EAAmB,EAAnBA,cACnE,OACE,uBAAMC,SAAUL,EAAhB,UACA,yCACQ,uBAAOJ,MAAOK,EAASH,SAAUI,OAEzC,2CACU,uBAAON,MAAOO,EAAWL,SAAUM,OAE7C,8BACE,wBAAQE,KAAK,SAAb,uBAiBAC,EAAU,SAAC,GAA4C,IAA1CC,EAAyC,EAAzCA,QAASC,EAAgC,EAAhCA,WAAYC,EAAoB,EAApBA,cAChCC,EAA+B,KAAfF,EAAoBD,EACxCA,EAAQI,QAAO,SAAAtB,GAAM,OAAqE,IAAjEA,EAAOE,KAAKqB,cAAcC,QAAQL,EAAWI,kBACxE,OACE,8BACGF,EAAcI,KAAI,SAAAzB,GAAM,OACvB,cAAC,EAAD,CAA0BA,OAAQA,EAClCC,aAAc,kBAlBD,SAACN,EAAIO,EAAMkB,GAE1BM,OAAOC,QAAP,iBAAyBzB,EAAzB,OACF0B,EAA2BjC,GACxBL,MAAK,SAAAC,GAAQ,OAAI6B,OAClBS,QAAQC,IAAR,UAAe5B,EAAf,eAEF2B,QAAQC,IAAR,UAAe5B,EAAf,kBAWwBD,CAAaD,EAAOL,GAAIK,EAAOE,KAAMkB,KAD5CpB,EAAOE,YAMtB6B,EAAe,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QAUtB,OAAgB,OAAZA,EACK,KACF,qBAAKC,MAXO,CACjBC,MAAO,QACPC,WAAY,YACZC,YAAa,QACbC,aAAc,EACdC,QAAS,GACTC,aAAc,GACdC,SAAU,IAIL,SAAyBR,KA+FnBS,EA5FH,WACV,MAA8BC,mBAAS,IAAvC,mBAAOxB,EAAP,KAAgByB,EAAhB,KACA,EAAgCD,mBAAS,IAAzC,mBAAQ/B,EAAR,KAAiBiC,EAAjB,KACA,EAAoCF,mBAAS,IAA7C,mBAAQ7B,EAAR,KAAmBgC,EAAnB,KACA,EAAsCH,mBAAS,IAA/C,mBAAQvB,EAAR,KAAoB2B,EAApB,KACA,EAAwCJ,mBAAS,MAAjD,mBAAOK,EAAP,KAAqBC,EAArB,KAEMC,EAAgB,WACpBrB,IACGtC,MAAK,SAAAC,GAAQ,OAAIoD,EAAWpD,OAGjC2D,oBAAUD,EAAe,IAyDzB,OACE,gCAEE,2CAEA,cAAC,EAAD,CAAcjB,QAASe,IACvB,cAAC,EAAD,CAAQzC,MAAOa,EAAYZ,QAVL,SAAC4C,GAAD,OAAWL,EAAcK,EAAMC,OAAO9C,UAY5D,2CAEA,cAAC,EAAD,CAAYI,aAvDG,SAACyC,GAClBA,EAAME,iBACN,IAAMC,EAAe,CACnBpD,KAAMS,EACNR,OAAQU,GAEJ0C,EAhBW,WACjB,IAAMC,EAAQtC,EAAQuC,MAAK,SAAAvD,GAAI,OAAIA,EAAKA,OAASS,KAEjD,QAAI6C,IACF3B,QAAQC,IAAR,gBAAqB0B,EAAMtD,KAA3B,YAAmCsD,EAAM7D,KAClC6D,EAAM7D,IAWG+D,GACdH,GACF7B,OAAOC,QAAP,UAAkBhB,EAAlB,qEAEAiB,EAA2B2B,EAAWD,GACnChE,MAAK,SAAAqE,GACJhB,EAAWzB,EAAQO,KAAI,SAAAzB,GAAM,OAAIA,EAAOL,KAAO4D,EAAYvD,EAAS2D,MACpEX,EAAgB,GAAD,OAAIrC,EAAJ,0BACfiD,YAAW,WACTZ,EAAgB,QACf,QAEJa,OAAM,SAAAC,GACLd,EAAgB,GAAD,OAAIrC,EAAJ,qCACfiD,YAAW,WACTZ,EAAgB,QACf,KACHL,EAAWzB,EAAQI,QAAO,SAAAtB,GAAM,OAAIA,EAAOL,KAAO4D,SAG1CA,IACZ3B,EAA2B0B,GACxBhE,MAAK,SAAAC,GAAQ,OAAIoD,EAAWzB,EAAQ6C,OAAOxE,OAC9CyD,EAAgB,GAAD,OAAIrC,EAAJ,wBACfiD,YAAW,WACTZ,EAAgB,QACf,MAGLJ,EAAW,IACXC,EAAa,KAoBPlC,QAASA,EAASC,YAjBF,SAACuC,GAAD,OAAWP,EAAWO,EAAMC,OAAO9C,QAkBnDO,UAAWA,EAAWC,cAdJ,SAACqC,GAAD,OAAWN,EAAaM,EAAMC,OAAO9C,UAiB3D,yCAEA,cAAC,EAAD,CAASY,QAASA,EAASC,WAAYA,EAAYC,cAAe6B,QC7JxEe,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.93f88fb1.chunk.js","sourcesContent":["import axios from \"axios\"\n\nconst baseUrl = '/api/persons'\n\nconst getAll = () => {\n    const request = axios.get(baseUrl)\n    //console.log('getall', request)\n    return request.then(response => response.data)\n}\n\nconst createPerson = (newPersonObj) => {\n    const request = axios.post(baseUrl, newPersonObj)\n    return request.then(response => response.data)\n}\n\nconst removePerson = (id) => {\n    const request = axios.delete(`${baseUrl}/${id}`)\n    //console.log(`Deleted ${id}`, request)\n    return request\n}\n\nconst updatePerson = (id, newObj) => {\n    const request = axios.put(`${baseUrl}/${id}`, newObj)\n    return request.then(response => response.data)\n}\n\nexport default { getAll, createPerson, removePerson, updatePerson }","import React, { useState, useEffect } from 'react'\nimport personService from './services/persons'\n\nconst Person = ({ person, deletePerson }) => {\n  return (\n    <div>\n      {person.name} {person.number}\n      <button onClick={deletePerson}>delete</button>\n    </div>\n  )\n}\n\nconst Filter = ({ value, handler }) => {\n  return (\n    <div>\n      filter shown with: <input value={value} onChange={handler} />\n    </div>\n  )\n}\n\nconst PersonForm = ({ handleSubmit, newName, nameHandler, newNumber, numberHandler}) => {\n  return (\n    <form onSubmit={handleSubmit}>\n    <div>\n      name: <input value={newName} onChange={nameHandler} />\n    </div>\n    <div>\n      number: <input value={newNumber} onChange={numberHandler} />\n    </div>\n    <div>\n      <button type=\"submit\">add</button>\n    </div>\n  </form>\n  )\n}\n\nconst deletePerson = (id, name, setAllPersons) => {\n  //console.log(`Delete ${id}`)\n  if (window.confirm(`Delete ${name}?`)) {\n    personService.removePerson(id)\n      .then(response => setAllPersons())\n      console.log(`${name} deleted.`)\n  } else {\n    console.log(`${name} not deleted.`)\n  }\n}\n\nconst Persons = ({ persons, filterWord, setAllPersons }) => {\n  const personsToShow = filterWord === '' ? persons : \n    persons.filter(person => person.name.toLowerCase().indexOf(filterWord.toLowerCase()) !== -1)\n  return (\n    <div>\n      {personsToShow.map(person => \n        <Person key={person.name} person={person} \n        deletePerson={() => deletePerson(person.id, person.name, setAllPersons)} />)}\n    </div>\n  )\n}\n\nconst Notification = ({ message }) => {\n  const errorStyle = {\n    color: 'green',\n    background: 'lightgrey',\n    borderStyle: 'solid',\n    borderRadius: 5,\n    padding: 10,\n    marginBottom: 10,\n    fontSize: 20,\n  }\n  if (message === null)\n    return null\n  return <div style={errorStyle}>{message}</div>\n}\n\nconst App = () => {\n  const [persons, setPersons] = useState([])\n  const [ newName, setNewName ] = useState('')\n  const [ newNumber, setNewNumber ] = useState('')\n  const [ filterWord, setFilterWord ] = useState('')\n  const [errorMessage, setErrorMessage] = useState(null)\n\n  const getAllPersons = () => {\n    personService.getAll()\n      .then(response => setPersons(response))\n  }\n\n  useEffect(getAllPersons, [])\n\n  const nameExists = () => {\n    const found = persons.find(name => name.name === newName)\n    \n    if (found) {\n      console.log(`Found ${found.name} ${found.id}`)\n      return found.id\n    }\n    return false\n  }\n\n  const addNewName = (event) => {\n    event.preventDefault()\n    const personObject = {\n      name: newName,\n      number: newNumber\n    }\n    const nameFound = nameExists()\n    if (nameFound && \n      window.confirm(`${newName} is already added to phonebook. Replace old number with new one?`)) {\n      //alert(`${newName} is already added to phonebook`)\n      personService.updatePerson(nameFound, personObject)\n        .then(updatedPerson => {\n          setPersons(persons.map(person => person.id !== nameFound ? person : updatedPerson)) \n          setErrorMessage(`${newName} updated in Phonebook`)\n          setTimeout(() => {\n            setErrorMessage(null)\n          }, 5000)\n        })\n        .catch(error => {\n          setErrorMessage(`${newName} was already removed from server`)\n          setTimeout(() => {\n            setErrorMessage(null)\n          }, 5000)\n          setPersons(persons.filter(person => person.id !== nameFound))\n        })\n      \n      } else if (!nameFound) {\n      personService.createPerson(personObject)\n        .then(response => setPersons(persons.concat(response)))\n      setErrorMessage(`${newName} added to Phonebook`)\n      setTimeout(() => {\n        setErrorMessage(null)\n      }, 5000)\n    }\n\n    setNewName('')\n    setNewNumber('')\n  }\n\n  const handleNameInput = (event) => setNewName(event.target.value)\n\n  const handleFilterInput = (event) => setFilterWord(event.target.value)\n\n  const handleNumberInput = (event) => setNewNumber(event.target.value)\n\n  return (\n    <div>\n\n      <h1>Phonebook</h1>\n\n      <Notification message={errorMessage} />\n      <Filter value={filterWord} handler={handleFilterInput} />\n\n      <h2>add a new</h2>\n\n      <PersonForm handleSubmit={addNewName} \n          newName={newName} nameHandler={handleNameInput}\n          newNumber={newNumber} numberHandler={handleNumberInput} \n      />\n\n      <h2>Numbers</h2>\n\n      <Persons persons={persons} filterWord={filterWord} setAllPersons={getAllPersons}/>\n\n    </div>\n  )\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}